import java.util.*;
import java.util.stream.Collectors;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    public String bestCharge(List<String> inputs) {
        //TODO: write code here
        if (Objects.isNull(inputs) || inputs.isEmpty()) return "";
        int length = inputs.size();

        //handle the input to get the dish ID and amount respectively
        Map<String, Integer> map = new LinkedHashMap<>();
        inputs.forEach(order -> {
            String[] strs = order.split("x");
            map.put(strs[0].trim(), Integer.parseInt(strs[1].trim()));
        });

        //get specific dish information
        List<Item> dishes = itemRepository.findAll();
        dishes = dishes.stream().filter(
                dish -> map.keySet().stream().anyMatch(id -> id.equals(dish.getId()))
        ).collect(Collectors.toList());
        //key: the item in order    value: amount of the item
        Map<Item, Integer> orders = new LinkedHashMap<>();
        dishes.forEach(
                dish -> orders.put(dish, map.get(dish.getId()))
        );

        //calculate the total price before promotion
        int total_before_promotion = orders.entrySet().stream().mapToInt(order -> (int) (order.getKey().getPrice() * order.getValue())).sum();

        //try the promotion "BUY_30_SAVE_6_YUAN"
        int total_after_promotion1 = total_before_promotion;
        if (total_before_promotion >= 30) total_after_promotion1 -= 6;

        //try the promotion "50%_DISCOUNT_ON_SPECIFIED_ITEMS"
        List<String> relatedItemIDs = null;
        List<SalesPromotion> promotions = salesPromotionRepository.findAll();
        for (SalesPromotion p : promotions) {
            if ("50%_DISCOUNT_ON_SPECIFIED_ITEMS".equals(p.getType())) {
                relatedItemIDs = p.getRelatedItems();
                break;
            }
        }
        //find out the discounted dishes in the order
        List<Item> relatedItems = null;
        if (Objects.nonNull(relatedItemIDs)) {
            List<String> ids = relatedItemIDs;
            Set<Item> items = orders.keySet();
            relatedItems = items.stream().filter(
                    item -> ids.stream().anyMatch(id -> id.equals(item.getId()))
            ).collect(Collectors.toList());
        }
        //calculate discounted price
        int total_after_promotion2 = total_before_promotion;
        if (Objects.nonNull(relatedItems) && !relatedItems.isEmpty()) {
            int save = 0;
            for (Item item : relatedItems) {
                save += item.getPrice();
            }
            save /= 2;
            total_after_promotion2 -= save;
        }

        //choose the best promotion
        SalesPromotion promotion = null;
        int total = Math.min(total_after_promotion1, total_after_promotion2);
        if (total == total_before_promotion) ;
        else if (total == total_after_promotion1) {
            promotion = promotions.stream().filter(p -> "BUY_30_SAVE_6_YUAN".equals(p.getType())).findFirst().get();
        } else {
            promotion = promotions.stream().filter(p -> "50%_DISCOUNT_ON_SPECIFIED_ITEMS".equals(p.getType())).findFirst().get();
        }

        //output
        StringBuilder sb = new StringBuilder();
        sb.append("============= Order details =============\n");
        orders.forEach((item, amount) ->
                sb.append(item.getName() + " x " + amount + " = " + (int) (item.getPrice() * amount) + " yuan\n")
        );
        sb.append("-----------------------------------\n");
        if (Objects.nonNull(promotion)) {
            sb.append("Promotion used:\n");
            if ("BUY_30_SAVE_6_YUAN".equals(promotion.getType()))
                sb.append(promotion.getDisplayName() + ", saving " + (total_before_promotion-total) + " yuan\n");
            else {
                sb.append(promotion.getDisplayName()).append(" (");
                for (int i = 0; i < relatedItems.size() - 1; i++) {
                    sb.append(relatedItems.get(i).getName() + ", ");
                }
                sb.append(relatedItems.get(relatedItems.size() - 1).getName());
                sb.append("), saving " + (total_before_promotion-total) + " yuan\n");
            }
            sb.append("-----------------------------------\n");
        }
        sb.append("Total: " + total + " yuan\n");
        sb.append("===================================");
        return sb.toString();

    }
}
