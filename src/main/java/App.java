import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    public String bestCharge(List<String> inputs) {
        //TODO: write code here
        if (Objects.isNull(inputs) || inputs.isEmpty()) return "";
        int size = inputs.size();
        String[] ids = new String[inputs.size()];   //save all ids
        int[] counts = new int[inputs.size()];
        for (int i = 0; i < size; i++) {
            String[] strs = inputs.get(i).split("x");
            ids[i] = strs[0].trim();
            counts[i] = Integer.parseInt(strs[1].trim());
        }

        List<Item> items = itemRepository.findAll();
        List<Item> order = new ArrayList<>();       //save orders
        for (int i = 0; i < size; i++) {
            for (Item item : items) {
                if (item.getId().equals(ids[i])) {
                    order.add(item);
                    break;
                }
            }
        }

        int sum = 0;    //calculate the total price
        for (int i = 0; i < size; i++) {
            sum += order.get(i).getPrice() * counts[i];
        }
        SalesPromotion promotion = null;
        int total = sum;
        List<Item> relatedItems = new ArrayList<>();

        if (sum >= 30) {    //condition: total price>=30
            List<SalesPromotion> promotions = salesPromotionRepository.findAll();   //choose promotion

            for (SalesPromotion p : promotions) {
                if ("50%_DISCOUNT_ON_SPECIFIED_ITEMS".equals(p.getType())) {    //find the relatedItems;
                    List<String> r = p.getRelatedItems();
                    for (String relatedItem : r) {
                        for (Item item : items) {
                            if (item.getId().equals(relatedItem)) {
                                relatedItems.add(item);
                                break;
                            }
                        }
                    }
                }
            }
            int p1 = sum - 6;
            int p2 = sum == 38 ? 25 : 50;
            total = Math.min(p1, p2);
            promotion = p1 <= p2 ? promotions.get(0) : promotions.get(1);
        }


        StringBuilder sb = new StringBuilder();
        sb.append("============= Order details =============\n");
        for (int i = 0; i < size; i++) {
            sb.append(order.get(i).getName() + " x " + counts[i] + " = " + (int) (order.get(i).getPrice() * counts[i]) + " yuan\n");
        }
        sb.append("-----------------------------------\n");
        if (Objects.nonNull(promotion)) {
            sb.append("Promotion used:\n");
            if ("BUY_30_SAVE_6_YUAN".equals(promotion.getType()))
                sb.append("Deduct 6 yuan when the order reaches 30 yuan, saving " + (sum - total) + " yuan\n");
            else {
                sb.append("Half price for certain dishes (");
                for (int i = 0; i < relatedItems.size() - 1; i++) {
                    sb.append(relatedItems.get(i).getName() + ", ");
                }
                sb.append(relatedItems.get(relatedItems.size() - 1).getName());
                sb.append("), saving " + (sum - total) + " yuan\n");
            }
            sb.append("-----------------------------------\n");
        }
        sb.append("Total: " + total + " yuan\n");
        sb.append("===================================");
        return sb.toString();

    }
}
